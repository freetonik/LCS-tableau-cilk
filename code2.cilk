#include <iostream>
#include <cilk.h>
#include <cilkview.h>
#include <string>
#include <time.h>
using namespace std;

int **array;	//global array for tableau

void LCS(int n, int startx, int starty, char* x, char* y){
	if (n==1){
		if(startx == 0 || starty == 0) 
		{
			array[startx][starty] = 0;	//first element of the table
		}
		else
		{
		if (x[startx-1] == y[starty-1]) array[startx][starty] = array[startx-1][starty-1]+1;
			else {
			if (array[startx-1][starty] > array[startx][starty-1]) 
					array[startx][starty]=array[startx-1][starty];
			else		array[startx][starty]=array[startx][starty-1];
			}
		}
	}else{
		cilk_spawn LCS(n/4, startx, starty, x, y);
		cilk_sync;
		cilk_spawn LCS(n/4, startx+n/4, starty, x, y);
		cilk_spawn LCS(n/4, startx, starty+n/4, x, y);
		cilk_sync;
		cilk_spawn LCS(n/4, startx, starty+n/2, x, y);
		cilk_spawn LCS(n/4, startx+n/4, starty+n/4, x, y);
		cilk_spawn LCS(n/4, startx+n/2, starty, x ,y);
		cilk_sync;
		cilk_spawn LCS(n/4, startx, starty+n/4+n/2, x, y);
		cilk_spawn LCS(n/4, startx+n/4, starty+n/2, x, y);
		cilk_spawn LCS(n/4, startx+n/2, starty+n/4, x, y);
		cilk_spawn LCS(n/4, startx+n/4+n/2, starty, x, y);
		cilk_sync;
		cilk_spawn LCS(n/4, startx+n/4, starty+n/4+n/2, x, y);
		cilk_spawn LCS(n/4, startx+n/2, starty+n/2, x, y);
		cilk_spawn LCS(n/4, startx+n/2+n/4, starty+n/4, x, y);
		cilk_sync;
		cilk_spawn LCS(n/4, startx+n/2, starty+n/4+n/2, x, y);
		cilk_spawn LCS(n/4, startx+n/4+n/2, starty+n/2, x, y);
		cilk_sync;
		cilk_spawn LCS(n/4, startx+n/4+n/2, starty+n/4+n/2, x, y);
		cilk_sync;
	}
}

void randstr(char s[], int n)
{
	int i;
	const char *src = "abcdefghijklmnopqrstuvwxyz";	//alphabet
	for (i=0; i<n; i++)
	{
		s[i] = src[rand() % 26];	//random letter generating
		cout << s[i];
	}
	cout << endl; 

}

//print out the table
void printarr(int n)
{
	for (int k=0; k<n; k++){
		for (int j=0; j<n; j++)
			cout << array[k][j] << " ";
			
	cout << endl;}
}

//retrieve the actual LCS
void backtrace(char* x, char* y, int i, int j, char* lcs, int lcs_length)
{
	if (lcs_length<0) return;
	else {
		if (x[i-1]==y[j-1]) 
		{
			lcs[lcs_length] = x[i-1];
			backtrace(x, y, i-1, j-1, lcs, lcs_length-1);	
		}
		else 
		{
			if (array[i] [j-1] > array[i-1][j]) backtrace(x, y, i, j-1, lcs, lcs_length);
				else backtrace(x,y, i-1, j, lcs, lcs_length);
		}
	}
}

//check if integer is a power of 2
bool ispower2(int x) {
	if (((x | (x-1))+1)/2 ==x) return true;
	else return false;
}

int cilk_main(int argc, char* argv[]){
	cilk::cilkview cv;
	
	int n=16;  //default length
	bool printTable=false; 
	if(argc > 1) n = atoi(argv[1]);
	if(argc > 2) printTable = true;
	if (!ispower2(n)) {cout << "Length is not a power of two!" << endl; return -1;}
	
	array = new int*[n];
	for (int i=0; i<n; i++) array[i]=new int[n];

	char *x = new char [n-1];
	char *y = new char [n-1];
	srand((unsigned)time(NULL));
	randstr(x, n-1);
	randstr(y, n-1);	

	cv.reset();
	cv.start();
	LCS(n,0,0,x,y);
	cv.stop();
	float par_time = cv.accumulated_milliseconds();
	cout << "Time " << par_time;
	if (printTable) printarr(n);
	
	if (array[n-1][n-1] > 0)
	{
		char *lcs = new char [array[n-1][n-1]];
		backtrace(x,y,n-1,n-1, lcs, array[n-1][n-1]-1);
		
		cout << endl << "LCS=";
		for (int i=0; i<array[n-1][n-1]; i++) cout << lcs[i];
		cout << endl;
	}

	for (int i=n-1; i>=0; i--) delete [] array[i];	//memory free
	delete [] array; // memory free
}

